        QUESTION :-

437. Path Sum III
Medium

Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values
along the path equals targetSum.
The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from 
parent nodes to child nodes).

 Example 1:
Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.
 Example 2:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: 3
 
Constraints:
The number of nodes in the tree is in the range [0, 1000].
-109 <= Node.val <= 109
-1000 <= targetSum <= 1000

Accepted:365,550
Submissions:729,525



    ANSWER :-


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// APPROACH :- using a recurssive function
//               1. taking sum of every path and incrementimng count is sum == targetSum
    
    
    void solve(TreeNode* root,int targetSum,int &count,vector<int> path)    {
        
        //base case
        if(root==NULL)
            return;
        
        //pushing data of every node we traverse into the path vector.
        path.push_back(root->val); 
        
        solve(root->left,targetSum,count,path);     //traversing left
        solve(root->right,targetSum,count,path);    //traversing right
        
        int size = path.size()-1;     
        double sum=0;      //calculating the sum of sub paths in the current path 
        
        for(int i = size; i>=0; i-- )    {
            
            sum += path[i];
            if(sum ==targetSum)     //incrementing count as sum == targetSum
                count++;
            
        }
        
        path.pop_back();    //popping back the node from which we are going back.
        
    }
    
    
    int pathSum(TreeNode* root, int targetSum) {
    
        vector<int> path;
        int count = 0;
        
        solve(root,targetSum,count,path);   //calling the helping function
        
        return count;
    
    }
};