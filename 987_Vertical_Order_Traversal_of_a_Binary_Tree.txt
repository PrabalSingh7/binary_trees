QUESTION :-(hard)

 ven the root of a binary tree, calculate the vertical order traversal of the binary tree.
 For each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) 
 and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).
 The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index
 starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the 
 same row and same column. In such a case, sort these nodes by their values.
 Return the vertical order traversal of the binary tree.

Example 1:
 Input: root = [3,9,20,null,null,15,7]
 Output: [[9],[3,15],[20],[7]]
 Explanation:
 Column -1: Only node 9 is in this column.
 Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.
 Column 1: Only node 20 is in this column.
 Column 2: Only node 7 is in this column.
Example 2:
 Input: root = [1,2,3,4,5,6,7]
 Output: [[4],[2],[1,5,6],[3],[7]]
 Explanation:
 Column -2: Only node 4 is in this column.
 Column -1: Only node 2 is in this column.
 Column 0: Nodes 1, 5, and 6 are in this column.
           1 is at the top, so it comes first.
           5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.
 Column 1: Only node 3 is in this column.
 Column 2: Only node 7 is in this column.
Example 3:
 Input: root = [1,2,3,4,6,5,7]
 Output: [[4],[2],[1,5,6],[3],[7]]
 Explanation:
 This case is the exact same as example 2, but with nodes 5 and 6 swapped.
 Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.
   
Constraints:
 The number of nodes in the tree is in the range [1, 1000].
 0 <= Node.val <= 1000






/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//APPRAOCH
// 1. hd = horizontal distance , level = lvl;
//    -> horizontal mapping used.
// 2. mapping < hd,< level with (node values vecto) > > so that later using vector stage we can sort 
      every horizintal level before putting an entire vertical level in result.
// 3. queue data structre as per the requirement of question and for level order traversal.
// refer to binary tree notes CODEHELP LECTURE 64.



class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        vector<vector<int>> result;
        
        if(root==NULL)
            return result;
        
        map<int,map<int,vector<int>>> mp;
        queue<pair<TreeNode*,pair<int,int>>> q;
        
        q.push(make_pair(root,make_pair(0,0)));
        
        while(!q.empty())   {
            
            pair<TreeNode*,pair<int,int>> temp = q.front();
            q.pop();
            
            //sepearting out components for better understanding.
            TreeNode* frontNode = temp.first;
            int hd = temp.second.first;
            int lvl = temp.second.second;
            
            mp[hd][lvl].push_back(frontNode->val);//pushing val of node with its level @ hor dist.
            
            if(frontNode->left)
                q.push(make_pair(frontNode->left,make_pair(hd-1,lvl+1))); //hd-1 ,as going left
            if(frontNode->right)
                q.push(make_pair(frontNode->right,make_pair(hd+1,lvl+1))); //hd+1 ,as going right
            
        }
        
        for(auto i:mp)  {
            vector<int> level,stage;
            for(auto j:i.second)   {              
                for(auto k:j.second)    {
                    stage.push_back(k);
                }
                sort(stage.begin(),stage.end());    //sort every level .
                for(auto l:stage)
                    level.push_back(l);
                stage.clear();
            }
            result.push_back(level);
        }
        
     return result;
        
    }
};