
    QUESTION :=>

1448. Count Good Nodes in Binary Tree
Medium

Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with 
a value greater than X.
Return the number of good nodes in the binary tree.

 Example 1:
Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.
 Example 2:
Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.
 Example 3:
Input: root = [1]
Output: 1
Explanation: Root is considered as good.
 
 Constraints:
The number of nodes in the binary tree is in the range [1, 10^5].
Each node's value is between [-10^4, 10^4].

Accepted:186,673
Submissions:255,711




    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    // APPROACH : we'll traverse the tree using depth first search , and during the time we will maintain a variable maxTill to store the greatest value yet in that particaular path, and each time we encounter a node with value greater than that or equal to it : we will update the value of maxTill and increment the count variable(used to store the number of good nodes present).

    
    
    void func(TreeNode *root, int &count, int maxTill)  {
        
        if(root==NULL)                      //base case
            return;
        
        if( root->val >= maxTill )   {      //condition checked
            count++;
            maxTill = root->val;
        }
        
        func(root->left,count,maxTill);     //going in left subtree
        func(root->right,count,maxTill);    //going to the right subtree
        
        return;
    }
    
    int goodNodes(TreeNode* root) {
        int count = 0;
        int maxTill = INT_MIN;
        func(root,count,maxTill);
        return count;
    }
};