APPROACH:-

1. Initialize current as root 
2. While current is not NULL
   If the current does not have left child
      a) Print current’s data
      b) Go to the right, i.e., current = current->right
   Else
      a) Find rightmost node in current left subtree OR
              node whose right child == current.
         If we found right child == current
             a) Update the right child as NULL of that node whose right child is current
             b) Print current’s data
             c) Go to the right, i.e. current = current->right
         Else
             a) Make current as the right child of that rightmost 
                node we found; and 
             b) Go to this left child, i.e., current = current->left


    
//APPROACH 3 :- MORRIS TRAVERSAL 
    // T(O) = O(n)   &   S(O) = O(1)
    // 1. Initialize current as root 
    // 2. While current is not NULL
    //    If the current does not have left child
    //       a) Print current’s data
    //       b) Go to the right, i.e., current = current->right
    //    Else
    //       a) Find rightmost node in current left subtree OR
    //               node whose right child == current.
    //          If we found right child == current
    //              a) Update the right child as NULL of that node whose right child is current
    //              b) Print current’s data
    //              c) Go to the right, i.e. current = current->right
    //          Else
    //              a) Make current as the right child of that rightmost 
    //                 node we found; and 
    //              b) Go to this left child, i.e., current = current->left
    
    
    void MorrisInorderTraversal(TreeNode* root,vector<int> &ans )   {
        
        TreeNode *current, *pre;
        
        if (root == NULL)
            return;

        current = root;
        while (current != NULL) {

            if (current->left == NULL) {
                ans.push_back(current->val);
                current = current->right;
            }
            else {

                /* Find the inorder predecessor of current */
                pre = current->left;
                while (pre->right != NULL && pre->right != current)
                    pre = pre->right;

                /* Make current as the right child of its inorder predecessor */
                if (pre->right == NULL) {
                    pre->right = current;   //making the thread(temp link)
                    current = current->left;
                }

                /* Revert the changes made in the 'if' part to
                   restore the original tree i.e., fix the right
                   child of predecessor */
                else {      //basically, deleting the temp link(thread)
                    pre->right = NULL;
                    ans.push_back(current->val);
                    current = current->right;
                } 
            
            } 
        
        } /* End of while */
        
    }
    
    vector<int> inorderTraversal(TreeNode* root) {
        
        vector <int> ans;
        
        if(root == NULL )
            return ans;
        
        MorrisInorderTraversal(root,ans);
         
        return ans;
    }
    
};             