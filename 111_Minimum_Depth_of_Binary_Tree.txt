    QUESTION :- 

111. Minimum Depth of Binary Tree
Easy

Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.

 Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 2
 Example 2:
Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5
 
 Constraints:
The number of nodes in the tree is in the range [0, 105].
-1000 <= Node.val <= 1000

Accepted:761,221
Submissions:1,784,677



    ANSWER :-


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
AAPROACH :- 
    1. we'll use a helping function solve() to ccalculate the depth of each node.
    2. variable mh = contains the minimum depth till now & variable cr = contains the depth of current node.
    3. we'll compare cr with mh only at leaf node and update the value accordingly.
    
    
    
    void solve(TreeNode* root, int &mh, int cr)   {
        
        if(root==NULL)
            return ;
        
        cr ++ ;
        
        if(root->left==NULL && root->right == NULL) {   //comparing the currHeight (cr) with 
            if(cr<mh)                                   //minimumHeight(mh) only at the LEAF NODE.
                mh=cr;        
        }
        
        solve(root->left,mh,cr);
        solve(root->right,mh,cr);
        
        return;
        
    }
    
    int minDepth(TreeNode* root) {
        
        if(root==NULL)
            return 0;
        
        int mh = INT_MAX;
        solve(root,mh,0);
        
        return mh ;
        
    }
};