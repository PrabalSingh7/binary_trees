
        QUESTION :-

572. Subtree of Another Tree
Easy

Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same 
structure and node values of subRoot and false otherwise.
A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. 
The tree tree could also be considered as a subtree of itself.

 Example 1:
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
 Example 2:
Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false

 Constraints:
The number of nodes in the root tree is in the range [1, 2000].
The number of nodes in the subRoot tree is in the range [1, 1000].
-104 <= root.val <= 104
-104 <= subRoot.val <= 104

Accepted:476,556
Submissions:1,049,037



        ANSWER :-


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// APPROACH 1 :- (can be optimized)
//     1. we traverse in tree 1 comparing every node with subRoot using function isSameTree().
//     2. fun isSamTree () compares and returns bool value accordingly if ree are same or no.
    
    bool isSameTree(TreeNode* p, TreeNode* q) {
        
        if(p==NULL && q==NULL)  
            return true;
        if(p!=NULL && q==NULL)  
            return false;
        if(p==NULL && q!=NULL)  
            return false;
                
        bool left = isSameTree(p->left,q->left);        
        bool right = isSameTree(p->right,q->right);
        
        bool value = p->val == q->val;

        
        if(left && right && value)
            return true;
        else
            return false;
        
    }
    
    void findFun(TreeNode* root, TreeNode* subRoot, int &k)     {
        
        if(root==NULL)
            return ;
        
        if( isSameTree(root,subRoot) )
            k++;
        
        findFun(root->left,subRoot,k);
        findFun(root->right,subRoot,k);
        
        return ;
        
    }
    
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        
        int k=0;
        findFun(root,subRoot,k);
        
        if(k==0)
            return false;
        else
            return true;
        
    }
    
    
    
};