
        QUESTION:-

106. Construct Binary Tree from Inorder and Postorder Traversal
Medium


Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and 
postorder is the postorder traversal of the same tree, construct and return the binary tree.

 Example 1:
Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]
 Example 2:
Input: inorder = [-1], postorder = [-1]
Output: [-1]
 
 Constraints:
  -> 1 <= inorder.length <= 3000
  -> postorder.length == inorder.length
  -> -3000 <= inorder[i], postorder[i] <= 3000
  -> inorder and postorder consist of unique values.
  -> Each value of postorder also appears in inorder.
  -> inorder is guaranteed to be the inorder traversal of the tree.
  -> postorder is guaranteed to be the postorder traversal of the tree.

Accepted:399,198
Submissions:718,713




        ANSWER :-


class Solution {
public:
//APPROACH:-  
    // 1.use an unordered map to store element -> its index 
    // 2.here, inorderIndex stores index of current root node .
    // 3.create the right subbtree first as its given in post order .and the the left subtree. 
    
    
    
    
    //creating the unordered map , storing element  withs in inorder index
    unordered_map<int,int>m;
    
    TreeNode* solve(vector<int>& inorder,vector<int>& postorder,int start,int end,int &postIndex){
        
        //base case
        if(start>end) 
            return NULL;
        
        //inorderIndex will store the inorder vector index of current node . 
        int inorderIndex = m[postorder[postIndex]];
        
        //creating the binary tree
        TreeNode* root = new TreeNode(inorder[inorderIndex]);    
        
        //decrementing the postIndex, to move from end to start.
        (postIndex)--;
        
        //creating the sybtees, right first and then left.
        root->right=solve(inorder,postorder,inorderIndex+1,end,postIndex);
        root->left=solve(inorder,postorder,start,inorderIndex-1,postIndex);
        
        return root;
    }
    
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {

        for(int i=0;i<inorder.size();i++){
            //storing values in map.          
            m[inorder[i]] = i;
        }
        
        int postIndex=postorder.size()-1;
        
        return solve(inorder,postorder,0,postorder.size()-1,postIndex);
    
    }
};
