
    QUESTION :-

116. Populating Next Right Pointers in Each Node
Medium

You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. 
The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should 
be set to NULL.
Initially, all next pointers are set to NULL.

 Example 1:
Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
 Example 2:
Input: root = []
Output: []
 
 Constraints:
The number of nodes in the tree is in the range [0, 212 - 1].
-1000 <= Node.val <= 1000
 

Follow-up:
You may only use constant extra space.
The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.

Accepted:804,259
Submissions:1,376,422


    ANSWER :-

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
private:
    vector<vector<Node*>> levelOrder;
    
public:
    
// APPROACH : we will traverse the tree in level order fashion so that we get a level order vector of the tree, after that we will put on the next of every root to the right in its level.
    
    
//     void levelOrderTraversal(Node*  root)   {

//     queue<Node* > q;
//     q.push(root);   

//     while(!q.empty())   {

//         int siz = q.size();
//         vector<Node*> level;
        
//         for(int i=0 ; i<siz ; i++ ) {
//             Node* temp = q.front();
//             q.pop();
//             level.push_back(temp);
//             if(temp->left)
//                 q.push(temp->left);
//             if(temp->right)
//                 q.push(temp->right);
//         }
        
//         levelOrder.push_back(level);
        
//     }

//         return; 
//     }
    
//     Node* connect(Node* root) {
        
//         if(root==NULL)
//             return root;
        
//         levelOrderTraversal(root);
        
//         for(int i=0 ; i<levelOrder.size() ; i++ )   {
//             for(int j=0 ; j<levelOrder[i].size()-1 ; j++ )    {
//                 if(j==levelOrder[i].size()-1)
//                     levelOrder[i][j]->next = NULL;
//                 levelOrder[i][j]->next = levelOrder[i][j+1];
//             }
//         }
        
//         return root;
//     }
    
// APPRAOCH 2 : (as per requirement of question )
//     there are two conditions :-
//         1. simply connect left child to right
//         2. if left child does'nt exist then connect the right child to parent's next's left child.
    
        
    Node* connect(Node* root) {
    
        //base case
        if(root == NULL) 
            return NULL;
        
        //connects the left subtree of same level with right subtree of that same level 
        if(root->left != NULL) 
            root->left->next = root->right;
        
        //connect the rightmost node of a level to the leftmost node of the next level.
        if(root->right != NULL && root->next != NULL) 
            root->right->next = root->next->left;
        
        //recursive calls for left and right subtrees.
        connect(root->left);
        connect(root->right);
        
        return root;
   
    }
};