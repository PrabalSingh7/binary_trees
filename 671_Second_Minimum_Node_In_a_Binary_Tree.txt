
        QUESTION :-

671. Second Minimum Node In a Binary Tree
Easy

Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this 
tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value 
among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.
Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in 
the whole tree.
If no such second minimum value exists, output -1 instead.

 Example 1:
Input: root = [2,2,5,null,null,5,7]
Output: 5
Explanation: The smallest value is 2, the second smallest value is 5.
 Example 2:
Input: root = [2,2,2]
Output: -1
Explanation: The smallest value is 2, but there isn't any second smallest value.
 
 Constraints:
The number of nodes in the tree is in the range [1, 25].
1 <= Node.val <= 231 - 1
root.val == min(root.left.val, root.right.val) for each internal node of the tree.

Accepted:143,212
Submissions:327,033


        ANSWER :-


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// APPROACH :- (can be optimized)
//     1. we'll transverse the tree and store root values in vector ans.
//     2. sort the vector ans and return the first distinct value
//     3. if not so then return -1.
    
    
    void traverse(TreeNode* root,vector<int> &ans)   {
        
        if(root==NULL)
            return;
        
        ans.push_back(root->val);
        
        traverse(root->left,ans);
        traverse(root->right,ans);
        
        return;
        
    }

    
    int findSecondMinimumValue(TreeNode* root) {
    
        vector<int> ans ;
        ans.push_back(root->val);
        
        traverse(root,ans);
        sort(ans.begin(),ans.end());
        
        if(ans.size()==1)
            return -1;
        
        for(int i = 1 ; i < ans.size() ; i++ )  {
            if(ans[0] != ans[i])
                return ans[i];
        }
        
        return -1 ;
            
    }
};