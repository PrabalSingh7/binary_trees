APPROACH :-

//APPROACH 3 :- MORRIS TRAVERSAL
//     T(O) = O(n)   &    S(O) = O(1)
        
//     1. If left child is null, print the current node data. Move to right child. 
//         Else, Make the right child of the inorder predecessor point to the current node. 
//         Two cases arise: 
//             a) The right child of the inorder predecessor already points to the current node.Set right child to NULL. Move to right child of current node. 
//             b) The right child is NULL. Set it to current node. Print current nodeâ€™s data and move to left child of current node. 
//     2. Iterate until current node is not NULL.
    

    void morrisTraversalPreorder(TreeNode* root, vector<int> &ans)    {
        
        while (root)    {
            
            // If left child is null, print the current node data. Move to right child.
            if (root->left == NULL)     {
                ans.push_back(root->val);
                root = root->right;
            }
            
            else    {
                
                // Find inorder predecessor
                TreeNode* current = root->left;
                while (current->right && current->right != root)
                    current = current->right;

                // If the right child of inorder predecessor already points to this node
                if (current->right == root)     {
                    current->right = NULL;
                    root = root->right;
                }

                // If right child doesn't point to this node, then print this node and make right child point to this node
                else        {
                    ans.push_back(root->val);
                    current->right = root;
                    root = root->left;
                }
            
            }
        
        }
    
    }
    
    
    vector<int> preorderTraversal(TreeNode* root) {
        
        vector <int> ans;
        
        if(root == NULL )
            return ans;
        
        morrisTraversalPreorder(root,ans);
         
        return ans;
    }
    
    