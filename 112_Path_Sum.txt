        QUESTION :-

112. Path Sum
Easy

Share
Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such 
that adding up all the values along the path equals targetSum.
A leaf is a node with no children.
 
 Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
 Example 2:
Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
 Example 3:
Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.
 
 Constraints:
The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000

Accepted:887,124
Submissions:1,940,805



        ANSWER :-


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// APPROACH :- 
//     1. using a vector<int> we store the values of all nodes in the path to leaf
//     2. at the leaf node we compare the sum of elements in vector with target sum
//             -> if sum == targetSum , we increment count by 1;
//             -> else , do nothing
//     3. if count that was initially declared as 0, if after traverssal :-
//             -> count == 0, return false
//             -> else, return true
    
    
    void solve(TreeNode* root, int targetSum , vector<int> pathValues ,int &count )    {
        
        if(root == NULL)
            return;
        
        pathValues.push_back(root->val);
        
        solve(root->left,targetSum,pathValues,count);
        solve(root->right,targetSum,pathValues,count);
        
        
        if( root->left==NULL && root->right==NULL )     {
            int sum = 0 ;
            for(auto it : pathValues)
                sum += it;
            
            cout<<sum<<" ";
            if(sum == targetSum)
                count++;        
            
            return;
        }
        
        return ;
        
    }
    
    bool hasPathSum(TreeNode* root, int targetSum) {
        
        if(root==NULL)
            return false;
        
        vector<int> pathValues ;
        int count = 0;
        
        solve(root,targetSum,pathValues,count);
        
        if(count==0)
            return false;
        
        return true;
        
    }
};