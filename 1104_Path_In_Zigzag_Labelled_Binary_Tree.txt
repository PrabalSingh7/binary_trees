    QUESTION :-

1104. Path In Zigzag Labelled Binary Tree
Medium

In an infinite binary tree where every node has two children, the nodes are labelled in row order.
In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the 
even numbered rows (second, fourth, sixth,...), the labelling is right to left.
Given the label of a node in this tree, return the labels in the path from the root of the tree to the node
with that label.

 Example 1:
Input: label = 14
Output: [1,3,4,14]
 Example 2:
Input: label = 26
Output: [1,2,6,10,26]
 
 Constraints:
1 <= label <= 10^6

Accepted:33,517
Submissions:44,909



    ANSWER :-

class Solution {
public:

    // APPROACH :-
    //     1. find the level in which label is present by pow(2,incrementing).
    //     2. get the index of label in the lowest level, as shown in code for respective odd n even cases.
    //     3. then decrement the level by 1 (going upwards) & index to its half ( to point to the node above the current in the upeer level ).
    //     4. push values in the result vector accordingly if level is odd or even as shown.
    
    
    vector<int> pathInZigZagTree(int label) {
        
        int level = 0;
        int val = 0;
        vector<int> result;
        result.push_back(label);
        
        while(val <= label)    {    //getting the level in which label will be present.
            val = pow(2,level);
            level++;        
        }
        level--;
        
        int index;  //getting the index of the label in the lowest level
        if(level % 2 == 0)  {
            index = pow(2,level)-label-1;
        }
        if(level % 2 != 0){
            index = label - pow(2,level-1);
        }
        
        while(level > 0) {
            
            index = index / 2;
            level--;
            
            if(level % 2 != 0)  {   //case when prev level is odd
                vector<int> lv;
                for(int i=pow(2,level-1);i<pow(2,level);i++)
                    lv.push_back(i);
                result.push_back( lv[index] );        
            }
            if(level % 2 == 0)  {   //case when prev level is even,ie reversed  
                vector<int> lv;
                for(int i=pow(2,level-1);i<pow(2,level);i++)
                    lv.push_back(i);
                reverse(lv.begin(),lv.end());   //handling reverse case
                result.push_back( lv[index] );
            }
            
        }
        
        result.pop_back();  //popping out the extra 0 at the end, then reversing the result vector as required.
        reverse(result.begin(),result.end());
        
        return result;
    }
};