QUESTION :-

Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true
 Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
 Example 3:
Input: root = []
Output: true

 Constraints:
The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //approached same as diameter of tree problem (making pair<bool,int> for optimization)
    
    //APPROACH :-
    //  3 conditions for recursive function :-
    //      1. is left subtree balanced ?
    //      2. is right subtree balanced ?
    //      3. ht of left subtree and ht right subtree, their abs difference <= 1.
    
    pair<bool,int> IBTF(TreeNode *root) {
        
        if(root==NULL)
            return make_pair(true,0);
        
        pair<bool,int> left = IBTF(root->left);
        pair<bool,int> right = IBTF(root->right);
        
        bool condition = abs( left.second - right.second ) <= 1;
        
        if(left.first && right.first && condition)
            return make_pair(true,max(left.second,right.second)+1 );
        else
            return make_pair(false,max(left.second,right.second)+1);
        
    }
    
    bool isBalanced(TreeNode* root) {
        return IBTF(root).first;
    }
};