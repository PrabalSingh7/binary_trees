
    QUESTION :->

951. Flip Equivalent Binary Trees
Medium

For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child 
subtrees.
A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of 
flip operations.
Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.

 Example 1:
Flipped Trees Diagram
Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
Output: true
Explanation: We flipped at nodes with values 1, 3, and 5.
 Example 2:
Input: root1 = [], root2 = []
Output: true
 Example 3:
Input: root1 = [], root2 = [1]
Output: false
 
 Constraints:
The number of nodes in each tree is in the range [0, 100].
Each tree will have unique node values in the range [0, 99].

Accepted:115,558
Submissions:173,119



    ANSWER :->

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// In this question, we have to check these following conditions,
// i) If root1 is not null and root2 is null then we have to return 0
// ii) If root1 is null and root2 is not null then we have to return 0
// iii) if root1 and root2 both are null then they are equal and return 1
// iv) and at last if both are not null and root1-val != root2->val then we have to return 0

// We have to check these condition recursively for the normal (left,right traversal) and some alternate traversal (because some subtree are flip ).

class Solution {
public:
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
       
        // check condition first,second,third
        if(root1 == NULL || root2 == NULL){
            return root1 == root2;
        }
        
        //check condition fourth
        if(root1->val != root2->val){
            return 0;
        }
    
        return ( flipEquiv(root1->left,root2->right) && flipEquiv(root1->right,root2->left) )|| (flipEquiv(root1->left,root2->left) && flipEquiv(root1->right,root2->right));
    }
};