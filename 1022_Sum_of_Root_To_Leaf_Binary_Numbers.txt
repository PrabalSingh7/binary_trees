    QUESTION:-

1022. Sum of Root To Leaf Binary Numbers

You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a
binary number starting with the most significant bit.
For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.
For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. 
Return the sum of these numbers.
The test cases are generated so that the answer fits in a 32-bits integer.

 Example 1:
Input: root = [1,0,1,0,1,0,1]
Output: 22
Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22
 Example 2:
Input: root = [0]
Output: 0
 
 Constraints:
The number of nodes in the tree is in the range [1, 1000].
Node.val is 0 or 1.

Accepted:164,025
Submissions:222,075




    ANSWER:-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// APPROACH :-(can be optimized easily :) but lazy to do that) 
//  1.using helping function rootToLeaf() to store the node values from root to leaf for all paths.
//  2.calculating the bit sum of each path and returning total sum of all.
    
    void rootToLeaf (TreeNode* root,vector<int> currPath, vector<vector<int>> &paths) {
        
        if(root==NULL)  {
            return;            
        }
        
        currPath.push_back(root->val);
        
        if(root->left == NULL && root->right == NULL)   {
            reverse(currPath.begin(),currPath.end());
            paths.push_back(currPath);            
        }
        
        rootToLeaf(root->left,currPath,paths);
        rootToLeaf(root->right,currPath,paths);
        
    }
    
    int calcBitSum(vector<vector<int>> paths)  {
        
        int totalSum = 0;
        int totalSize = paths.size();
            
        for(int i=0;i<totalSize;i++) {
            
            int currSize = paths[i].size();
            int currPathSum = 0;
                
            for(int j=0;j<currSize;j++) {
                currPathSum += paths[i][j] * pow(2,j);
            }
            //cout<<currPathSum<<" ";
            totalSum += currPathSum;
            
            
        }
        
        return totalSum;
        
    }
    
    int sumRootToLeaf(TreeNode* root) {
        
        vector<vector<int>> paths;
        vector<int> currPath;
        rootToLeaf(root,currPath,paths);
        
        return calcBitSum(paths);
        
    }
};