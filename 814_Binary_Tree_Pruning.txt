    QUESTION :-

814. Binary Tree Pruning
Medium

Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing 
a 1 has been removed.
A subtree of a node node is node plus every node that is a descendant of node.

 Example 1:
Input: root = [1,null,0,0,1]
Output: [1,null,0,null,1]
Explanation: 
Only the red nodes satisfy the property "every subtree not containing a 1".
The diagram on the right represents the answer.
 Example 2:
Input: root = [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]
 Example 3:
Input: root = [1,1,0,1,1,0,1,0]
Output: [1,1,0,1,1,null,1]
 
 Constraints:
The number of nodes in the tree is in the range [1, 200].
Node.val is either 0 or 1.

Accepted:141,770
Submissions:199,805


    
    ANSWER :-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
//     APPROACH : recusssive solution
//                 1.go in left subtree and calulate number of 1's there, same in right;
//                 2.if(#of 1's in left == 0) put NULL in leftsubtree,same with right;
    
    
    int prune(TreeNode*  root)    {
        
        if(root==NULL)      
            return 0;
        
        if(root->left ==NULL && root->right == NULL)    {   //leaf node case;
            if(root->val == 0)
                return 0;
            else
                return 1;                
        }
        
        int lst = prune(root->left);    //count 1's in leaf subtree
        int rst = prune(root->right);   //count 1's in right subtree
        
        if(lst == 0)    //putting NULL in leftsubtree if # of 1's == 0.
            root->left = NULL;
        if(rst == 0)    //putting NULL in rightsubtree if # of 1's == 0.
            root->right = NULL;
        
        return lst + rst + (root->val==1 ? 1 : 0 ) ;    //returning number of 1's in a subtree.
        
    }
    
    
    TreeNode* pruneTree(TreeNode* root) {
        
        if(prune(root)==0 ) 
            return NULL;
        return root;
        
    }
};