
    QUESTION :-

652. Find Duplicate Subtrees
Medium

Given the root of a binary tree, return all duplicate subtrees.
For each kind of duplicate subtrees, you only need to return the root node of any one of them.
Two trees are duplicate if they have the same structure with the same node values.

 Example 1:
Input: root = [1,2,3,4,null,2,4,null,null,4]
Output: [[2,4],[4]]
 Example 2:
Input: root = [2,1,1]
Output: [[1]]
 Example 3:
Input: root = [2,2,2,3,null,3,null]
Output: [[2,3],[3]]
 
 Constraints:
The number of the nodes in the tree will be in the range [1, 10^4]
-200 <= Node.val <= 200

Accepted:164,205
Submissions:292,064



    ANSWER :-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// APPROACH : for every subtree we store it's structure in a map, and everytime while traversing if we find that the cureent subtree structure is already present in the mp, we put that node in out result vector.

class Solution {
public:
    
    vector<TreeNode*> ans;
    unordered_map<string, int>mymap;
  
    string helper(TreeNode* root)   {
        
        if(root == NULL) 
            return "";
        
        string l= helper(root->left);
        string r= helper(root->right);
        string s = "(" + l + to_string(root->val) + r + ")"; //make unique string of each subtree
        
        if(mymap[s]!=-1) 
            mymap[s]++; // if string is not present insert and increase count
      
        if(mymap[s]>1) // if same string found more than one time we got same subtrees
        {
            ans.push_back(root);
            mymap[s]=-1; // no need to insert again
        }
      
        return s; 
    }
    
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        
        helper(root);
        return ans;
    
    }
};