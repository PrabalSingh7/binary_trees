QUESTION :-

    199. Binary Tree Right Side View
    Medium

    Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the 
    nodes you can see ordered from top to bottom.   

        Example 1:
    Input: root = [1,2,3,null,5,null,4]
    Output: [1,3,4]
        Example 2:
    Input: root = [1,null,3]
    Output: [1,3]
        Example 3:
    Input: root = []
    Output: []
    
    Constraints:
            The number of nodes in the tree is in the range [0, 100].
            -100 <= Node.val <= 100
    
    Accepted:674,987
    Submissions:1,131,022



ANSWER :-


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        
        vector<int> result;
        
        if(root==NULL)
            return result;
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty())   {
            
            int len = q.size();
            
            for(int i=0;i<len;i++)  {
                TreeNode* temp=q.front();
                q.pop();
                
                if(i==len-1) //using this condition to only push the right most ele in the result.
                    result.push_back(temp->val);
                
                if(temp->left)                
                    q.push(temp->left);
                if(temp->right)                
                    q.push(temp->right);
            }
        
        }
    
    return result;    
    }



        


// APPROACH :- recursive solution
//         -> we tracking the level .
//         -> whenever a new level comes, we'll store data
//               (automatically the node will be the right most)


    void solve(TreeNode* root, vector<int> &ans, int level) {

        if(root==NULL)
            return ;

        if(level > ans.size())  //when entering a new level,storing its rightmost root data
            ans.push_back(root->val);

        solve(root->right,ans,level+1);
        solve(root->left,ans,level+1);

    }


    vector<int> rightSideView(TreeNode *root)    {

        vector<int> ans;
        solve(root,ans,1);
        return ans;

    }

    
};