
    QUESTION :-

1609. Even Odd Tree
Medium

A binary tree is named Even-Odd if it meets the following conditions:

The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.

 Example 1:
Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
Output: true
Explanation: The node values on each level are:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.

 Example 2:
Input: root = [5,4,2,3,3,7]
Output: false
Explanation: The node values on each level are:
Level 0: [5]
Level 1: [4,2]
Level 2: [3,3,7]
Node values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.
 
 Example 3:
Input: root = [5,9,1,3,5,7]
Output: false
Explanation: Node values in the level 1 should be even integers.
 

 Constraints:
The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 106

Accepted:35,313
Submissions:66,235


    ANSWER :-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSorted(vector<int> val,int lvl)  {  
        if(lvl % 2 == 0)    {
            for( int i=0 ; i<val.size()-1 ; i++ )    {
                if(val[i+1]<=val[i]){
                    cout<<"sorted issue increasing \n";
                    return false;
                }
            }
        }
        if(lvl % 2 == 1)    {
            for( int i=0 ; i<val.size()-1 ; i++ )    {
                if(val[i+1]>=val[i]){
                    cout<<"sorted issue decreasing \n";
                    return false;
                }
            }
        }
        
        return true;
    }
    
    
    bool isEvenOddTree(TreeNode* root) {
        
        bool ans = true;
        
        queue<TreeNode*> q;
        q.push(root);
        int lvl = 0;
        
        while(!q.empty())   {
            
            int siz = q.size();
            vector<int> level;
            
            for(int i=0 ; i<siz ; i++ ) {
                
                TreeNode* temp = q.front();
                q.pop();
                
                if(lvl%2==0)    {
                    if(temp->val%2==0){
                        cout<<"level issue even \n";
                        return false;
                    }
                }
                if(lvl%2==1)    {
                    if(temp->val%2==1){
                        cout<<"level issue odd \n";
                        return false;
                    };
                }   
                
                level.push_back(temp->val);
                
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);

            }
            
            if(isSorted(level,lvl) == false)
                return false;
            
            lvl++;
                        
        }
        return ans;
    }
};