        QUESTION :-

637. Average of Levels in Binary Tree
Easy

Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. 
Answers within 10-5 of the actual answer will be accepted.
 
 Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
Hence return [3, 14.5, 11].
 Example 2:
Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]

 Constraints:
The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

Accepted:272,455
Submissions:395,913


    ANSWER :-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

// APPROACH :- 
//     1. Traverse using the level order traversal.
//     2. On every level while traversing calculate the sum average of that level and store it in ans vector.

    vector<double> averageOfLevels(TreeNode* root) {
        
        vector<double> ans ;
        
        if(root==NULL)
            return ans ;
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty())   {
            
            int size = q.size();
            vector<double> level;
            
            for(int i=0;i<size;i++) {
                
                TreeNode* front = q.front();
                q.pop();
                
                level.push_back(front->val);
                
                if(front->left)
                    q.push(front->left);
                if(front->right)
                    q.push(front->right);                
            
            }
            
            double sum = 0; 
            for(auto it : level)
                sum += it;
            double levelsum = sum /size;
            
            ans.push_back(levelsum);
                
        }
        
        return ans;
    
    }
};