
    QUESTION :=>

2196. Create Binary Tree From Descriptions
Medium

You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti 
is the parent of childi in a binary tree of unique values. Furthermore,

If isLefti == 1, then childi is the left child of parenti.
If isLefti == 0, then childi is the right child of parenti.
Construct the binary tree described by descriptions and return its root.

The test cases will be generated such that the binary tree is valid.

 Example 1:
Input: descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]
Output: [50,20,80,15,17,19]
Explanation: The root node is the node with value 50 since it has no parent.
The resulting binary tree is shown in the diagram.
 Example 2:
Input: descriptions = [[1,2,1],[2,3,0],[3,4,1]]
Output: [1,2,null,null,3,4]
Explanation: The root node is the node with value 1 since it has no parent.
The resulting binary tree is shown in the diagram.
 
 Constraints:
1 <= descriptions.length <= 104
descriptions[i].length == 3
1 <= parenti, childi <= 105
0 <= isLefti <= 1
The binary tree described by descriptions is valid.

Accepted:18,251
Submissions:25,652




    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// the first approach is mine (it theoritically is correct but not working :999 )


// class Solution {
// public:
    
//     TreeNode* function(int root, map<int,vector<int>> st)   {
        
//         if(root == -1)  {
//             cout<<"n"<<" ";            
//             return NULL;
//         }
        
//         TreeNode* node = new TreeNode(root);
//         cout<<root<<" ";
        
//         if(st.find(root) == st.end() )  {
//             cout<<"N"<<" ";
//             return nullptr;
//         }
        
//         node->left = function(st[root][0],st);
//         node->right = function(st[root][1],st);
        
//         return node;
        
//     }
    
//     TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        
//         int index = 0;
//         int size = descriptions.size();
//         map<int,vector<int>> st;
//         int root = -1;
//         vector<int> v;
//         v.push_back(-1);
//         v.push_back(-1);
        
//         for(int i=0 ; i<descriptions.size() ; i++)   {
            
//             if(st.find(descriptions[i][0]) != st.end() ){
//                 if(descriptions[i][2] == 1) 
//                     st[ descriptions[i][0] ][0] = descriptions[i][1];
//                 if(descriptions[i][2] == 0) 
//                     st[ descriptions[i][0] ][1] = descriptions[i][1];
//             }
//             else    {
//                 st[ descriptions[i][0] ] = v;
//                 if(descriptions[i][2] == 1) 
//                     st[ descriptions[i][0] ][0] = descriptions[i][1];
//                 else if(descriptions[i][2] == 0) 
//                     st[ descriptions[i][0] ][1] = descriptions[i][1];
//             }
            
//         }
        
//         for(auto i : st)    
//             cout<<i.first<<" "<<i.second[0]<<" "<<i.second[1]<<"\n";
        
//         for(int i=0; i<descriptions.size() ; i++)    {
//             bool isfound = false ; 
//             for(int j=0; j<descriptions.size() ; j++)    {
//                 if(descriptions[i][0]  == descriptions[j][1]) {
//                     isfound = true;
//                     break;
//                 }
//             }
//             if(isfound == false){
//                 root = descriptions[i][0];
//                 break;
//             }
                
//         }
//         cout<<"\n"<<root<<"\n";
//         TreeNode* rootTree = function(root,st);
        
//         return rootTree;
    
//     }
    
// };
    
    
    
    
    class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions){
        unordered_map<int, TreeNode*> getNode;                          //to check if node alredy exist
        unordered_map<int, bool> isChild;                               //to check if node has parent or not
        for(auto &v: descriptions){
            if(getNode.count(v[0])==0){
                TreeNode* par = new TreeNode(v[0]);
                getNode[v[0]] = par;
            }
            if(getNode.count(v[1])==0){
                TreeNode* child = new TreeNode(v[1]);
                getNode[v[1]] = child;
            }
            if(v[2]==1) getNode[v[0]]->left = getNode[v[1]];               //left-child
            else getNode[v[0]]->right = getNode[v[1]];                     //right-child
            isChild[v[1]] = true;
        }
        TreeNode* ans = NULL;
        for(auto &v: descriptions){
            if(isChild[v[0]] != true){                  //if node has no parent then this is root node
                ans = getNode[v[0]]; 
                break;
            }
        }
        return ans;
    }
};