
    QUESTION :-

513. Find Bottom Left Tree Value
Medium

Given the root of a binary tree, return the leftmost value in the last row of the tree.

 Example 1:
Input: root = [2,1,3]
Output: 1
 Example 2:
Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7
 
 Constraints:
The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

Accepted:182,774
Submissions:277,760




    ANSWER :-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

 // APPROACH 1 : using recursion, we maintain a level variable(for maintaining the current level) and maxLevel (for maintaining the depeset level yet), and evertime we go to a new deepest level, we store the value.    


    void util(TreeNode* root, int level, int &maxLevel, int &res)   {
    
        if(root==NULL)  
            return;
 
        level++;
        if(level>maxLevel)  {
            cout<<root->val<<" "<<level<<" "<<maxLevel<<"\n";
            maxLevel = level;
            res = root->val;
        }
        
        util(root->left,level,maxLevel,res);
        util(root->right,level,maxLevel,res);        
      
        return;

    }
    
    int findBottomLeftValue(TreeNode* root) {
        int res=0, level=0, maxLevel=-1;
        util(root,level,maxLevel,res);
        return res;
    }

};

    
// // APPROACH 2 : using level order traversal , give out the first vlaue of last level as result.
    
//     int findBottomLeftValue(TreeNode* root) {
        
//         queue<TreeNode*> q;
//         q.push(root);
//         int res = -1 ;
//         while(!q.empty())   {
            
//             int size = q.size();
//             for( int i=0 ; i<size ; i++ )   {
//                 TreeNode* temp = q.front();
//                 q.pop();
//                 if(i==0)
//                     res = temp->val;
//                 if(temp->left)  q.push(temp->left);
//                 if(temp->right)  q.push(temp->right);
//             }
        
//         }
//         return res;
//     }
// };