
QUESTION :=>

1026. Maximum Difference Between Node and Ancestor
Medium

Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where 
v = |a.val - b.val| and a is an ancestor of b.
A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

 Example 1:
Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
 Example 2:
Input: root = [1,null,2,null,0,3]
Output: 3
 
 Constraints:
The number of nodes in the tree is in the range [2, 5000].
0 <= Node.val <= 105

Accepted:135,166
Submissions:184,321




ANSWERV :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // Algorithm:-
// For every node we have to calcuate the left minimum, left maximum, right minimum,right maximum and find the effective difference between the root and the max of left right and min of left right and we will get our answer.We will be using recursion to find out the minimum and maximum values on the way.
    
    
    int maxAncestorDiff(TreeNode* root, int mini = INT_MAX, int maxi = INT_MIN) {
        
        // base case
        if (root==NULL) 
            return (maxi - mini);
        
        // update mini and maxi
        mini = min(mini, root->val), maxi = max(maxi, root->val);
        
        // finding the maximum distance we would like to find by going left and right
        int l = maxAncestorDiff(root->left, mini, maxi);
        int r = maxAncestorDiff(root->right, mini, maxi);
        
        return max(l,r);
        
    }
};