QUESTION :-

Given a Binary Tree. Return true if, for every node X in the tree other than the leaves, its value is equal to the 
sum of its left subtree's value and its right subtree's value. Else return false.
An empty tree is also a Sum Tree as the sum of an empty tree can be considered to be 0. 
A leaf node is also considered a Sum Tree.


Example 1:

Input:
    3
  /   \    
 1     2

Output: 1
Explanation:
The sum of left subtree and right subtree is
1 + 2 = 3, which is the value of the root node.
Therefore,the given binary tree is a sum tree.
Example 2:

Input:

          10
        /    \
      20      30
    /   \ 
   10    10

Output: 0
Explanation:
The given tree is not a sum tree.
For the root node, sum of elements
in left subtree is 40 and sum of elements
in right subtree is 30. Root element = 10
which is not equal to 30+40.

Your Task: 
You don't need to read input or print anything. 
Complete the function isSumTree() which takes root node as input parameter and returns true if the 
tree is a SumTree else it returns false.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(Height of the Tree)

Constraints:
1 ≤ number of nodes ≤ 104



       
       
       ANSWER :-


// APPROACH : creating a pair<bool,int> recurssive function to optimize.
    // 3 conditions to be checked :-
    //  1.is left subtree a sum tree.
    //  2.is right subtree a sum tree.
    //  3.is the given question SUM condition checked.
    
public:     
    
    
    pair<bool,int> iSTF(Node *root)   {
        
        if(root==NULL)  {       //base case 1
            return make_pair(true,0);
        }                       //base case 2 : for leaf nodes .
        if(root->left==NULL && root->right==NULL){
            return make_pair(true,root->data);
        }
        
        pair<bool,int> leftAns = iSTF(root->left);  //transversing in left
        pair<bool,int> rightAns = iSTF(root->right);    //transversing in right
                //condition for sum :-
        bool condition = root->data == leftAns.second + rightAns.second ;
                 //all 3 conditions checked or not
        if(leftAns.first && rightAns.first && condition)   {   
            return make_pair(true,root->data + leftAns.second + rightAns.second);
        }
        else
            return make_pair(false,0);
    }
    bool isSumTree(Node* root)    {
         // Your code here
         return iSTF(root).first;
    }